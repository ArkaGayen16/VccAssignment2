# -*- coding: utf-8 -*-
"""autoscaling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xulOch37Q370yZv1jxa7ozJt8F5up7Fy
"""

import multiprocessing
import time

def check_prime(number):
    """Determine whether a given number is prime."""
    if number < 2:
        return False
    if number in (2, 3):
        return True
    if number % 2 == 0 or number % 3 == 0:
        return False
    divisor = 5
    while divisor * divisor <= number:
        if number % divisor == 0 or number % (divisor + 2) == 0:
            return False
        divisor += 6
    return True

def find_primes():
    """Continuously identify and display prime numbers."""
    candidate = 2
    while True:
        if check_prime(candidate):
            print(candidate, end=" ", flush=True)
        candidate += 1

def cpu_stress_test(core_count):
    """Initiate a CPU-intensive process using multiple cores."""
    workers = []
    for _ in range(core_count):
        process = multiprocessing.Process(target=find_primes)
        process.start()
        workers.append(process)

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        for process in workers:
            process.terminate()
        print("\nStress test halted.")

if __name__ == "__main__":
    available_cores = multiprocessing.cpu_count()  # Detect available CPU cores
    print(f"Initiating CPU stress test on {available_cores} cores...")
    cpu_stress_test(available_cores)